{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout-hello","title":"Project layout Hello","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"Yocto-Project/00-Yocto-Intro/","title":"Yocto","text":""},{"location":"Yocto-Project/00-Yocto-Intro/#00-yocto-introduction","title":"00 Yocto Introduction","text":""},{"location":"Yocto-Project/00-Yocto-Intro/#what-is-yocto","title":"What is Yocto?","text":"<p>THE YOCTO PROJECT.  IT'S NOT AN EMBEDDED LINUX DISTRIBUTION, IT CREATES A CUSTOM ONE FOR YOU.</p> <p>https://www.yoctoproject.org/</p>"},{"location":"Yocto-Project/00-Yocto-Intro/#why-to-use-yocto","title":"Why to use Yocto?","text":"<ul> <li>To configure the Linux according to our specs. </li> <li>The Image contains what we need.</li> <li>No extra packages. </li> <li>Small Image Size.</li> </ul>"},{"location":"Yocto-Project/00-Yocto-Intro/#what-is-the-work-flow","title":"What is the  Work-flow?","text":"<p>For now, not going in detail in Work-flow. Will see later in detail.</p> <p>https://www.yoctoproject.org/software-overview/</p> <p>In Later videos, we will try to understand the work flow in detail.</p>"},{"location":"Yocto-Project/00-Yocto-Intro/#host-pc-requirements","title":"Host PC Requirements","text":"<ul> <li>Minimum 50 GB free space</li> <li>Minimum 4 GB RAM</li> </ul>"},{"location":"Yocto-Project/00-Yocto-Intro/#supported-linux-distros","title":"Supported Linux Distros","text":"<ul> <li>Ubuntu 18.04 (LTS)</li> <li>Ubuntu 20.04 (LTS)</li> <li>Ubuntu 22.04 (LTS)</li> <li>Fedora 34</li> <li>Fedora 35</li> <li>AlmaLinux 8.5</li> <li>Debian GNU/Linux 10.x (Buster)</li> <li>Debian GNU/Linux 11.x (Bullseye)</li> <li>OpenSUSE Leap 15.3</li> </ul> <p>I am using Ubuntu 18.04 (LTS)</p>"},{"location":"Yocto-Project/00-Yocto-Intro/#which-target-hardware-is-being-used","title":"Which Target Hardware is being used?","text":"<p>We are using here BeagleBone Black.</p>"},{"location":"Yocto-Project/00-Yocto-Intro/#main-features","title":"Main features","text":"<ul> <li>512MB DDR3 RAM</li> <li>4 GB emmc</li> <li>SD card slot</li> <li>HDMI</li> <li>GPIOs, UARTs, SPI, I2C, Ethernet, USB ... </li> </ul>"},{"location":"Yocto-Project/00-Yocto-Intro/#pinout","title":"PinOut","text":"<p>https://vadl.github.io/images/bbb/bbb_headers.png</p> <p>The specs you can read here: https://beagleboard.org/black</p>"},{"location":"Yocto-Project/00-Yocto-Intro/#setup-host-pc","title":"Setup Host PC","text":""},{"location":"Yocto-Project/00-Yocto-Intro/#editor","title":"Editor","text":"<ul> <li> <p>OS: Ubuntu 18.04 (LTS)</p> </li> <li> <p>Using VSCode</p> </li> </ul> <p><code>bash   # Installing VS code using CLI   sudo apt update   sudo apt install snapd   sudo snap install --classic code</code></p>"},{"location":"Yocto-Project/00-Yocto-Intro/#install-required-packages","title":"Install required packages","text":"<pre><code>sudo apt install gawk wget git diffstat unzip texinfo gcc build-essential chrpath socat cpio python3 python3-pip python3-pexpect xz-utils debianutils iputils-ping python3-git python3-jinja2 libegl1-mesa libsdl1.2-dev pylint3 xterm python3-subunit mesa-common-dev zstd liblz4-tool\n\n</code></pre> <p>Reference: https://docs.yoctoproject.org/4.0.7/brief-yoctoprojectqs/index.html#build-host-packages</p>"},{"location":"Yocto-Project/00-Yocto-Intro/#building-image","title":"Building Image","text":""},{"location":"Yocto-Project/00-Yocto-Intro/#what-is-poky","title":"What is Poky?","text":"<p>Poky is a reference distribution of the Yocto Project\u00ae. It contains the OpenEmbedded Build System (BitBake and OpenEmbedded Core) as well as a set of metadata to get you started building your own distro. </p>"},{"location":"Yocto-Project/00-Yocto-Intro/#cloning-poky","title":"Cloning Poky","text":"<p>Create a project folder and clone the poky in it.</p> <pre><code>mkdir yocto_tutorial\ncd yocto_tutorial\ngit clone git://git.yoctoproject.org/poky -b kirkstone\n</code></pre>"},{"location":"Yocto-Project/00-Yocto-Intro/#initialize-build-environment","title":"Initialize Build Environment","text":"<pre><code>cd poky\nsource oe-init-build-env\n</code></pre> <p>Now we are in build folder, there are some folders and files, right now the important is conf folder.</p> <p>In terminal there are multiple image options</p>"},{"location":"Yocto-Project/00-Yocto-Intro/#create-source-folder-not-necessary-but-very-much-recommended","title":"Create Source Folder (not necessary, but very much recommended)","text":"<p>From build folder run the following command</p> <pre><code>mkdir ../../sources\n</code></pre>"},{"location":"Yocto-Project/00-Yocto-Intro/#make-changes-in-localconf","title":"Make Changes in local.conf","text":"<ul> <li> <p>Change Machine</p> </li> <li> <p>Change source path</p> </li> <li> <p>Set following</p> </li> <li> <ul> <li>RM_OLD_IMAGE = \"1\"</li> </ul> </li> <li> <p>INHERIT += \"rm_work\"</p> </li> <li> <p>Save</p> </li> </ul> <p>We will discuss the content of local.conf file  in another chapter.</p>"},{"location":"Yocto-Project/00-Yocto-Intro/#build-image","title":"Build Image","text":"<p>Execute the following command from build folder</p> <pre><code>bibake core-image-full-cmdline\n</code></pre> <p>This will take a while, depending upon the Image and the specs of your system and the Internet connection.</p> <p>On first build it will take time, later when we will make small changes, it will only build the changes, not the full image.</p> <p>And will add these changes to our image file</p>"},{"location":"Yocto-Project/00-Yocto-Intro/#image-file","title":"Image File","text":"<p>Go to the tmp folder, my tmp folder is in my source folder, that we created before</p> <p>I am opening a new terminal and going to the image folder.</p> <pre><code>cd ../../sources/tmp/deploy/images/beaglebone-yocto\n</code></pre> <p>Here is our Image : core-image-full-cmdline-beaglebone-yocto.wic</p>"},{"location":"Yocto-Project/00-Yocto-Intro/#end","title":"End","text":"<p>In the next chapter I will show you how to flash the Image in beaglenone black and how to boot it.</p>"},{"location":"Yocto-Project/01-Flashing-BBB/","title":"Yocto","text":""},{"location":"Yocto-Project/01-Flashing-BBB/#01-flashing-beaglebone-black","title":"01 Flashing BeagleBone Black","text":""},{"location":"Yocto-Project/01-Flashing-BBB/#image-folder","title":"Image Folder","text":"<p>sources/tmp/deploy/images/beaglebone-yocto</p>"},{"location":"Yocto-Project/01-Flashing-BBB/#identify-image-file","title":"Identify  Image File","text":"<p>We need to find the .wic file with starts with our Image name. In our case core-image-full-cmdline-beaglebone-yocto.wic</p> <p>But as we see it is a symblink, we need to find the orignal file. the extention of the file will be the same i.e. .wic</p> <p>To find the original file, execute the following command from beaglebone-yocto folder.</p> <pre><code>ll  | grep \"cmdline\" | grep \".wic\"\n</code></pre>"},{"location":"Yocto-Project/01-Flashing-BBB/#required-hardware","title":"Required Hardware","text":"<ul> <li>Beaglebone Black https://grabcad.com/library/beaglebone-black-rev-c-1</li> <li>Min 8Gb  micro-SD-Card</li> <li>SD-Card Reader</li> <li>FTDI Cable (Serial to USB) https://raw.githubusercontent.com/guyz/pyesp8266/master/ftdi_pinout.png   https://microcontrollerslab.com/wp-content/uploads/2020/12/FTDI-cable-pinout-diagram.jpg</li> <li>5V Power Supply for BBB https://www.digikey.de/en/products/detail/phihong-usa/PSC12R-050/2384498</li> </ul>"},{"location":"Yocto-Project/01-Flashing-BBB/#which-flash-tool-to-use","title":"Which Flash Tool to Use?","text":""},{"location":"Yocto-Project/01-Flashing-BBB/#dd","title":"dd","text":"<p>Dangerous to use, unrecoverable data, if wrong device is used to flash.</p>"},{"location":"Yocto-Project/01-Flashing-BBB/#etcher","title":"Etcher","text":"<ul> <li>Safe to use</li> <li>Hides system memory devices and shows external devices</li> <li>Download from https://www.balena.io/etcher</li> </ul> <p>We will be using Etcher</p>"},{"location":"Yocto-Project/01-Flashing-BBB/#how-to-flash","title":"How to Flash?","text":""},{"location":"Yocto-Project/01-Flashing-BBB/#etcher_1","title":"Etcher","text":"<ul> <li>Download  Etcher</li> <li>Go to the Download folder</li> <li>Right click on Etcher, Go to  Properties &gt; Permissions</li> <li>Check the box Allow executing file as progran</li> <li>Close the window</li> <li>Now Double click on Etcher, a window will open.</li> </ul>"},{"location":"Yocto-Project/01-Flashing-BBB/#flash","title":"Flash","text":"<ul> <li>Insert the SD card to Host PC</li> <li>In Etcher Window, select SD-Card</li> <li>Click  Flash from file and browse the Image file that we found earlier (.wic).</li> <li>Click Flash!, and wait till the flash is complete</li> <li>Close Etcher.</li> <li>Click on Unmount  icon to safely remove the SD-Card.</li> </ul>"},{"location":"Yocto-Project/01-Flashing-BBB/#install-picocom-in-host-pc","title":"Install Picocom in Host PC","text":"<p>To install the Picocom , execute the following command:</p> <pre><code>sudo apt-get install picocom\n</code></pre> <p>It is needed to connect the Beaglebone Black to the serial console</p>"},{"location":"Yocto-Project/01-Flashing-BBB/#connect-ftdi","title":"Connect FTDI","text":"<ul> <li> <p>Connect the USB Side of FTDI cable to the Host PC</p> </li> <li> <p>Execute the following command to verify.   <code>bash   dmesg | grep ftdi</code></p> </li> </ul> <p>You may see the output like below but not the exact   <code>bash   [14264.312945] usbcore: registered new interface driver ftdi_sio   [14264.313235] ftdi_sio 1-4.3:1.0: FTDI USB Serial Device converter detected   [47027.147164] ftdi_sio ttyUSB0: FTDI USB Serial Device converter now disconnected from ttyUSB0   [47027.147242] ftdi_sio 1-4.3:1.0: device disconnected   [57870.337870] ftdi_sio 1-4.3:1.0: FTDI USB Serial Device converter detected</code></p> <ul> <li> <p>ttyUSB0 is our FTDI device. it can be found under /dev/ttyUSB0</p> </li> <li> <p>Connect the other end of FTDI cable to Beaglebone Black.   Orientation:   Place the board in such a way that USB port should be in front of you.   Then insert the pin header in such a way, that the Green Pin of FTDI cable should be inserted to the pin which is near to USB  port.</p> </li> <li> <p>Go to the terminal and write the following command to connect to Beaglebone Black   <code>bash   sudo picocom /dev/ttyUSB0 -b 115200</code></p> </li> </ul> <p>Then enter the password.</p>"},{"location":"Yocto-Project/01-Flashing-BBB/#booting","title":"Booting","text":"<ul> <li> <p>At the back side of the Beaglebone Black, there is a SD-Card jack, insert the SD-Card with the image there</p> </li> <li> <p>Adjacent to the USB port, there is a small button with the lable S2 on it.</p> </li> <li>Keep the S2 button pressed and insert the Power Supply in Beaglebone Black.</li> <li>After 2 to 3 seconds release the S2 button.</li> <li>By now you should see the output on your picocom Terminal. </li> </ul> <p>The Beaglebone Black has been booted successfully</p>"},{"location":"Yocto-Project/01-Flashing-BBB/#checking-image","title":"Checking image","text":"<p>Execute the following command to check the kernel version </p> <pre><code>uname -r\nuname -a\n</code></pre> <p>Execute the following to see the partitions</p> <pre><code>lsblk\n</code></pre> <p>Check rootfs folders</p> <pre><code>cd /\nls\n</code></pre>"},{"location":"Yocto-Project/01-Flashing-BBB/#end","title":"End","text":"<p>In the next chapter we will talk about local.conf file</p>"},{"location":"Yocto-Project/02_Local_Conf/","title":"Yocto","text":""},{"location":"Yocto-Project/02_Local_Conf/#02-localconf","title":"02 local.conf","text":""},{"location":"Yocto-Project/02_Local_Conf/#what-is-localconf","title":"What is local.conf?","text":"<ul> <li>local.conf file is used to customize the image</li> <li>add packages</li> </ul>"},{"location":"Yocto-Project/02_Local_Conf/#default-configurations-in-localconf-file","title":"Default Configurations in local.conf file","text":"<ul> <li>MACHINE ?= \"beaglebone-yocto\"</li> <li>DL_DIR, SSTATE_DIR, TMPDIR</li> <li>DISTRO ?= \"poky\"</li> <li>PACKAGE_CLASSES ?= \"package_rpm\"</li> <li>EXTRA_IMAGE_FEATURES ?= \"debug-tweaks\"</li> <li>USER_CLASSES ?= \"buildstats\"</li> <li>PATCHRESOLVE = \"noop\"</li> <li>BB_DISKMON_DIRS</li> <li>CONF_VERSION = \"2\"</li> </ul>"},{"location":"Yocto-Project/02_Local_Conf/#added-configurations","title":"Added Configurations","text":"<ul> <li>RM_OLD_IMAGE = \"1\"</li> <li>INHERIT += \"rm_work\"</li> </ul>"},{"location":"Yocto-Project/02_Local_Conf/#configuration-details","title":"Configuration Details","text":""},{"location":"Yocto-Project/02_Local_Conf/#machine","title":"MACHINE","text":"<p>Specifies the target device for which the image is built.</p>"},{"location":"Yocto-Project/02_Local_Conf/#list-of-default-machines","title":"List of default Machines","text":"<p>MACHINE ?= \"qemuarm\" MACHINE ?= \"qemuarm64\" MACHINE ?= \"qemumips\" MACHINE ?= \"qemumips64\" MACHINE ?= \"qemuppc\" MACHINE ?= \"qemux86\" MACHINE ?= \"qemux86-64\" MACHINE ?= \"genericx86\" MACHINE ?= \"genericx86-64\" MACHINE ?= \"beaglebone\" MACHINE ?= \"edgerouter\"</p> <p>default  Machine Conf File locations</p> <p>poky/meta/conf/machines</p> <p>poky/meta-yocto-bsp</p>"},{"location":"Yocto-Project/02_Local_Conf/#dl_dir","title":"DL_DIR","text":"<p>DL_DIR is a variable in the Yocto Project build system that specifies the directory where source code archives for packages will be downloaded. This directory is used by the build system to store the downloaded source code for packages so that it does not need to download them again if they are required for a subsequent build. </p>"},{"location":"Yocto-Project/02_Local_Conf/#sstate_dir","title":"SSTATE_DIR","text":"<p>SSTATE_DIR is a variable that specifies the directory where shared state cache files are stored. The shared state cache contains pre-built binary packages for software components used in a build.</p> <p>The purpose of using a shared state cache is to speed up the build process by avoiding the need to rebuild packages that have already been built previously. When a package is built for the first time, the build system stores the compiled binaries, headers, and other artifacts in the shared state cache, and subsequent builds of the same package can reuse these cached artifacts, saving time and resources.</p>"},{"location":"Yocto-Project/02_Local_Conf/#tmpdir","title":"TMPDIR","text":"<p>TMPDIR is an environment variable that specifies the directory to be used for temporary files by various programs and scripts. In Yocto and OpenEmbedded, TMPDIR is used as the location for the build directory, where all the build artifacts are stored during the build process.</p>"},{"location":"Yocto-Project/02_Local_Conf/#distro","title":"DISTRO","text":"<p>DISTRO ?= \"poky\"</p> <ul> <li>DISTRO variable specifies the name of the distribution that is being built.</li> <li>A distribution is a collection of software components and configuration files that work together to create a complete Linux-based operating system</li> <li>Setting DISTRO to \"poky\" means that the build system will use the configuration files and package recipes that are part of the reference distribution.</li> </ul>"},{"location":"Yocto-Project/02_Local_Conf/#package_classes","title":"PACKAGE_CLASSES","text":"<p>PACKAGE_CLASSES ?= \"package_rpm\"</p> <ul> <li>PACKAGE_CLASSES is a configuration variable specifies the types of packages to be created for the target system. </li> <li>In this case, it is set to <code>\"package_rpm\"</code>, which means that the Yocto Project will create RPM packages.</li> <li>RPM  is a package management system that is widely used in many Linux distributions, including Red Hat, Fedora, CentOS, and openSUSE. </li> <li>DEB package management is used on Debian and Ubuntu systems.</li> </ul>"},{"location":"Yocto-Project/02_Local_Conf/#extra_image_features","title":"EXTRA_IMAGE_FEATURES","text":"<p>EXTRA_IMAGE_FEATURES ?= \"debug-tweaks\"</p> <ul> <li>EXTRA_IMAGE_FEATURES is a variable that specifies additional features to be included in the target image</li> <li>debug-tweaks is one of the features that can be included in the image.</li> <li>The resulting image will contain additional tools and utilities that can help with debugging and troubleshooting.</li> <li>dbg-pkgs \u2014 adds -dbg packages for all installed packages including symbol information for debugging and profiling.</li> <li>debug-tweaks \u2014 makes an image suitable for debugging. For example, allows root logins without passwords and enables post-installation logging. See the \u2018allow-empty-password\u2019 and \u2018post-install-logging\u2019 features in the \u201cImage Features\u201d section for more information.</li> <li>dev-pkgs \u2014 adds -dev packages for all installed packages. This is useful if you want to develop against the libraries in the image.</li> <li>read-only-rootfs \u2014 creates an image whose root filesystem is read-only. See the \u201cCreating a Read-Only Root Filesystem\u201d** section in the Yocto Project Development Tasks Manual for more information</li> <li>tools-debug \u2014 adds debugging tools such as gdb and strace.</li> <li>tools-sdk \u2014 adds development tools such as gcc, make, pkgconfig and so forth.</li> </ul>"},{"location":"Yocto-Project/02_Local_Conf/#user_classes","title":"USER_CLASSES","text":"<p>USER_CLASSES ?= \"buildstats\"</p> <ul> <li>The buildstats class records performance statistics about each task executed during the build (e.g. elapsed time, CPU usage, and I/O usage).</li> <li>The buildstats class generates statistics about how long tasks take to build, so it can help identify bottlenecks in the build process. It creates a buildstats database that can be used to analyze the build process.</li> <li>When you use this class, the output goes into the BUILDSTATS_BASE directory, which defaults to ${TMPDIR}/buildstats/.</li> </ul>"},{"location":"Yocto-Project/02_Local_Conf/#patchresolve","title":"PATCHRESOLVE","text":"<p>PATCHRESOLVE = \"noop\"</p> <ul> <li>Determines the action to take when a patch fails. You can set this variable to one of two values: noop and user.</li> <li>The default value of noop causes the build to simply fail when the build system cannot successfully apply a patch.</li> <li>Setting the value to user causes the build system to launch a shell and places you in the right location so that you can manually resolve the conflicts.</li> </ul>"},{"location":"Yocto-Project/02_Local_Conf/#bb_diskmon_dirs","title":"BB_DISKMON_DIRS","text":"<ul> <li>Monitors disk space and available inodes during the build and allows you to control the build based on these parameters.</li> <li>STOPTASKS,${TMPDIR},1G,100K stops the build after all currently executing tasks complete when the minimum disk space in the <code>${TMPDIR}</code> directory drops below 1 Gbyte.</li> <li>HALT,${TMPDIR},100M,1K immediately stops the build when the disk space in the <code>${TMPDIR}</code> directory drops below 100 Mbytes.</li> </ul>"},{"location":"Yocto-Project/02_Local_Conf/#conf_version","title":"CONF_VERSION","text":"<p>CONF_VERSION = \"2\"</p> <ul> <li>CONF_VERSION is used to specify the version of the configuration syntax to use. </li> <li>It determines which syntax the build system should use when parsing configuration files like local.conf and bblayers.conf.</li> <li>In earlier versions of Yocto, CONF_VERSION defaulted to 1</li> <li>In practice, setting CONF_VERSION = \"2\" in <code>local.conf</code> enables the use of newer features and syntax in Yocto</li> </ul>"},{"location":"Yocto-Project/02_Local_Conf/#rm_old_image","title":"RM_OLD_IMAGE","text":"<p>RM_OLD_IMAGE = \"1\"</p> <ul> <li>Setting RM_OLD_IMAGE to 1 means that Yocto will remove the old image before building a new one, which helps to avoid issues with leftover files and dependencies from previous builds</li> </ul>"},{"location":"Yocto-Project/02_Local_Conf/#inherit","title":"INHERIT","text":"<p>INHERIT += \"rm_work\" </p> <ul> <li>The rm_work class is used to remove temporary working files after a package has been built. </li> <li>These files are not necessary for the package to function properly and take up disk space, so removing them can free up space on the device.</li> </ul>"},{"location":"Yocto-Project/02_Local_Conf/#reference-link","title":"Reference Link","text":"<p>https://docs.yoctoproject.org/ref-manual/variables.html#</p>"},{"location":"Yocto-Project/02_Local_Conf/#end","title":"End","text":"<p>In the next chapter we will analyze the bblayers.conf file</p>"},{"location":"Yocto-Project/03_BBLAYERS_Conf/","title":"Yocto","text":""},{"location":"Yocto-Project/03_BBLAYERS_Conf/#03-bblayersconf","title":"03 bblayers.conf","text":""},{"location":"Yocto-Project/03_BBLAYERS_Conf/#what-is-bblayersconf","title":"What is bblayers.conf?","text":"<ul> <li>bblayers.conf is a configuration file used by the build systems</li> <li>In this file the set of layers are defined that should be included in a build.</li> <li>The bblayers.conf file specifies the location of each layer on the local file system.</li> </ul>"},{"location":"Yocto-Project/03_BBLAYERS_Conf/#what-is-a-layer","title":"What is a Layer?","text":"<p>A layer is a collection of related metadata that provides configuration information, such as recipes, configuration files, and other data required to build and customize an image.</p> <p>Layers name start with meta</p> <p>For Example </p> <ul> <li>meta</li> <li>meta-poky</li> <li>meta-yocto-bsp</li> </ul>"},{"location":"Yocto-Project/03_BBLAYERS_Conf/#what-is-a-recipe","title":"What is a Recipe?","text":"<ul> <li>A set of instructions for building packages</li> <li>A recipe describes where you get source code</li> <li>Which patches to apply</li> <li>How to configure the source</li> <li>How to compile it and so on</li> </ul> <p>These all steps we will see in detail in later a video.</p> <p>Recipes also describe dependencies for libraries or for other recipes</p> <p>Example \"meta/recipes-extended/minicom/minicom_2.8.bb\"</p>"},{"location":"Yocto-Project/03_BBLAYERS_Conf/#bitbake-basic-layers-commands","title":"Bitbake basic layers commands","text":""},{"location":"Yocto-Project/03_BBLAYERS_Conf/#show-layers-in-bblayersconf","title":"Show layers  in bblayers.conf","text":"<pre><code>bitbake-layers show-layers\n</code></pre>"},{"location":"Yocto-Project/03_BBLAYERS_Conf/#add-layer-to-bblayersconf","title":"Add layer to bblayers.conf?","text":"<pre><code>bitbake-layers add-layer &lt;path/to/layer&gt;\n</code></pre>"},{"location":"Yocto-Project/03_BBLAYERS_Conf/#remove-layer-from-bblayersconf","title":"Remove layer from bblayers.conf?","text":"<pre><code>bitbake-layers remove-layer &lt;path/to/layer&gt;\n</code></pre>"},{"location":"Yocto-Project/03_BBLAYERS_Conf/#reference-link","title":"Reference Link","text":"<p>https://docs.yoctoproject.org/ref-manual/variables.html#</p>"},{"location":"Yocto-Project/03_BBLAYERS_Conf/#end","title":"End","text":"<p>In the nect video we will learn how to add packages in our image</p>"},{"location":"Yocto-Project/04_Add_Packages/","title":"Yocto","text":""},{"location":"Yocto-Project/04_Add_Packages/#04-add-packages","title":"04 Add Packages","text":""},{"location":"Yocto-Project/04_Add_Packages/#how-to-add-package","title":"How to Add Package?","text":"<p>Add the following line in local.conf file.</p> <p>IMAGE_INSTALL:append = \" package_name\"</p> <p>E.g:</p> <p>IMAGE_INSTALL:append = \" python3\"</p> <p>IMAGE_INSTALL:append = \" git\"</p>"},{"location":"Yocto-Project/04_Add_Packages/#how-to-find-packages","title":"How to Find Packages?","text":"<pre><code>bitbake-layers show-recipes \nbitbake-layers show-recipes python3\nbitbake-layers show-recipes git\n</code></pre>"},{"location":"Yocto-Project/04_Add_Packages/#reference-link","title":"Reference Link","text":"<p>https://docs.yoctoproject.org/ref-manual/variables.html#</p>"},{"location":"Yocto-Project/04_Add_Packages/#end","title":"End","text":"<p>In the next video we will learn how to create a recipe</p>"},{"location":"Yocto-Project/05_Create_Layer/","title":"Yocto","text":""},{"location":"Yocto-Project/05_Create_Layer/#05-create-layers","title":"05 Create Layers","text":""},{"location":"Yocto-Project/05_Create_Layer/#what-is-a-layer","title":"What is  a Layer?","text":"<p>Layers are repositories that contain related metadata (i.e. sets of instructions) that tell the OpenEmbedded build system how to build a target. It contains the recipes to build the target package.</p> <p>It may also contain, target machines configuration, distro configuration.</p>"},{"location":"Yocto-Project/05_Create_Layer/#what-is-layer-priority","title":"What is layer priority?","text":"<p>Establishes a priority to use for recipes in the layer when the OpenEmbedded build finds recipes of the same name in different layers. A higher numeric value represents a higher priority.</p>"},{"location":"Yocto-Project/05_Create_Layer/#how-to-check-priotity","title":"How to check priotity","text":"<p>Show layers </p> <pre><code>bitbake-layers show-layers\n</code></pre>"},{"location":"Yocto-Project/05_Create_Layer/#how-to-create-layer","title":"How to create Layer?","text":"<pre><code>bitbake-layers create-layer &lt;path/to/meta-layername&gt;\n</code></pre>"},{"location":"Yocto-Project/05_Create_Layer/#add-layer-to-buind-system","title":"Add layer to buind system","text":"<pre><code>bitbake-layers add-layer  &lt;path/to/meta-layername&gt;\n</code></pre>"},{"location":"Yocto-Project/05_Create_Layer/#reference-link","title":"Reference Link","text":"<p>https://docs.yoctoproject.org/dev/overview-manual/yp-intro.html#the-yocto-project-layer-model</p> <p>https://docs.yoctoproject.org/dev/dev-manual/layers.html#creating-your-own-layer</p>"},{"location":"Yocto-Project/05_Create_Layer/#end","title":"End","text":"<p>In the next video we will learn how to create a recipe</p>"},{"location":"Yocto-Project/06_Basic_Variables/","title":"Yocto","text":""},{"location":"Yocto-Project/06_Basic_Variables/#05-basic-variables","title":"05 Basic Variables","text":""},{"location":"Yocto-Project/06_Basic_Variables/#what-are-you-going-to-learn","title":"What are you going to learn?","text":"<p>In this video we are going to learn about some basic default variables used in the Yocto build system.</p>"},{"location":"Yocto-Project/06_Basic_Variables/#basic-variables","title":"Basic Variables","text":"<ul> <li>PN (Package Name)</li> <li>PV (Package Version)</li> <li>PR (Package Revision)</li> <li>WORKDIR (Working Directory)</li> <li>S (Source)</li> <li>D (Destination)</li> <li>B (Build Directory)</li> </ul>"},{"location":"Yocto-Project/06_Basic_Variables/#recipe-name-pattern","title":"Recipe Name Pattern","text":"<p>PN_PV_PR.bb</p> <p>Example:</p> <p>example2_0.2_r0</p>"},{"location":"Yocto-Project/06_Basic_Variables/#how-to-read-variable-value","title":"How to Read Variable Value","text":"<pre><code>bitbake -e &lt;RECIPE_NAME&gt; | grep ^&lt;VARIABLE_NAME&gt;=\n</code></pre>"},{"location":"Yocto-Project/06_Basic_Variables/#package-name-pn","title":"Package Name (PN)","text":"<p>PN refers to a recipe name used by the Yocto build system as input to create a package. The name is  extracted from the recipe file name.</p>"},{"location":"Yocto-Project/06_Basic_Variables/#package-version-pv","title":"Package Version (PV)","text":"<p>PV is the version of the recipe. The version is normally extracted from the recipe filename.</p>"},{"location":"Yocto-Project/06_Basic_Variables/#package-revision-pr","title":"Package Revision (PR)","text":"<p>The revision of the recipe. The default value for this variable is \u201cr0\u201d</p>"},{"location":"Yocto-Project/06_Basic_Variables/#working-directory-workdir","title":"Working Directory (WORKDIR)","text":"<p>The WORKDIR is the pathname of the work directory in which the Yocto build system builds a recipe. This directory is located within the TMPDIR directory structure and is specific to the recipe being built and the system for which it is being built.</p>"},{"location":"Yocto-Project/06_Basic_Variables/#source-s","title":"Source (S)","text":"<p>S is the location in the Build Directory where unpacked recipe source code resides. By default, this directory is WORKDIR/BPN-PV, where BPN is the base recipe name and PV is the recipe version.</p>"},{"location":"Yocto-Project/06_Basic_Variables/#destination-d","title":"Destination (D)","text":"<p>D is the destination directory. It is the  location in the Build Directory where components are installed by the do_install task. This location defaults to WORKDIR/image.</p>"},{"location":"Yocto-Project/06_Basic_Variables/#build-directory-b","title":"Build Directory (B)","text":"<p>It is same as S.</p>"},{"location":"Yocto-Project/06_Basic_Variables/#reference-link","title":"Reference Link","text":"<p>https://docs.yoctoproject.org/dev/overview-manual/yp-intro.html#the-yocto-project-layer-model</p>"},{"location":"Yocto-Project/06_Basic_Variables/#end","title":"End","text":"<p>In the next video we will learn about the types of variable assignments.</p>"},{"location":"Yocto-Project/07_Variable_Assignment/","title":"Yocto","text":""},{"location":"Yocto-Project/07_Variable_Assignment/#07-variable-assignment","title":"07 Variable Assignment","text":""},{"location":"Yocto-Project/07_Variable_Assignment/#what-are-you-going-to-learn","title":"What are you going to learn?","text":"<p>In this Video we are goin to learn about Types of Variable Assignments.</p>"},{"location":"Yocto-Project/07_Variable_Assignment/#types-of-variable-assignments","title":"Types of Variable Assignments","text":"<ul> <li>?=   : This is used to assign the default value to varibale. It can be overridden.</li> <li>??= : This is used to assign the default value to varibale. But it is a weak assignment. It can be overridden. If multiple assignments are done with this type, the the last one will be considered.</li> <li>=   : This is a simple variable assignment. It requires \" \" and spaces are significant. But variables are expanded at the end.</li> <li>:= : This is an immediate variable expansion. The value assigned is expanded immediately.</li> <li>+= : This appends a value to a variable. The operator inserts a space between the current value and appended value. It takes effect immediately.</li> <li>=+ : This prepends a value to a variable, The operator inserts a space between the current value and prepended value. It takes effect immediately.</li> <li>.= :  This appends a value to a variable. The operator inserts no space between the current value and appended value. It takes effect immediately.</li> <li>=. : This prepends a value to a variable. The operator inserts no space between the current value and prepended value. It takes effect immediately.</li> <li>:append :  This appends a value to a variable. The operator inserts no space between the current value and appended value.  The effects are applied at variable expansion time rather than being immediately applied.</li> <li>:prepend :  This appends a value to a variable. The operator inserts no space between the current value and appended value. The effects are applied at variable expansion time rather than being immediately applied.</li> <li>:remove : This remove values from lists. Specifying a value for removal causes all occurrences of that value to be removed from the variable.</li> </ul>"},{"location":"Yocto-Project/07_Variable_Assignment/#how-to-read-variable-value","title":"How to Read Variable Value","text":"<pre><code>bitbake -e &lt;RECIPE_NAME&gt; | grep ^&lt;VARIABLE_NAME&gt;=\n</code></pre>"},{"location":"Yocto-Project/07_Variable_Assignment/#assignment-type","title":"Assignment Type ?=","text":"<pre><code>TEST ?= \"foo\"\nTEST ?= \"bar\"\nTEST ?= \"val\"\nTEST ?= \"var\"\n\n# The final value is TEST=\"foo\" \n</code></pre>"},{"location":"Yocto-Project/07_Variable_Assignment/#assignment-type_1","title":"Assignment Type ??=","text":"<pre><code>TEST ??= \"foo\"\nTEST ??= \"bar\"\nTEST ??= \"val\"\nTEST ??= \"var\"\n\n# The final value is TEST=\"var\" \n</code></pre> <pre><code>TEST ??= \"foo\"\nTEST ?= \"bar\"\nTEST ?= \"val\"\nTEST ??= \"var\"\n\n# The final value is TEST=\"bar\" \n</code></pre>"},{"location":"Yocto-Project/07_Variable_Assignment/#assignment-type_2","title":"Assignment Type =","text":"<pre><code># Override\nA ?= \"foo\"\nA = \"bar\"\n\n# The final value is A=\"bar\" \n\n# Variable Expansion\nA = \"foo\"\nB = \"${A}\"\nA = \"bar\"\n\n# The final value is B=\"bar\" \n</code></pre>"},{"location":"Yocto-Project/07_Variable_Assignment/#assignment-type_3","title":"Assignment Type :=","text":"<pre><code># Override\nA ?= \"foo\"\nA := \"bar\"\n\n# The final value is A=\"bar\" \n\n# Variable Expansion\nA = \"foo\"\nB := \"${A}\"\nA = \"bar\"\n# The final value is B=\"foo\" \n</code></pre>"},{"location":"Yocto-Project/07_Variable_Assignment/#assignment-type-and","title":"Assignment Type +=  and =+","text":"<pre><code># Spaces are added here\n\n# Append\nA = \"foo\"\nA += \"bar\"\n\n# The final value is A=\"foo bar\" \n\n# Prepend\nB = \"foo\"\nB =+ \"bar\"\n\n# The final value is B=\"bar foo\"\n\n# Append\nA ?= \"val\"\nA += \"var\"\n\n# The final value is A=\"var\"\n\n# Prepend\nB ??= \"val\"\nB =+ \"var\"\n\n# The final value is B=\"var\"\n</code></pre>"},{"location":"Yocto-Project/07_Variable_Assignment/#assignment-type-and_1","title":"Assignment Type .=  and =.","text":"<pre><code># No Spaces are added here\n# Needs to add extra space\n\n# Append\nA = \"foo\"\nA .= \"bar\"\n\n# The final value is A=\"foobar\" \n\n# Prepend\nB = \"foo\"\nB =. \"bar\"\n\n# The final value is B=\"barfoo\"\n</code></pre>"},{"location":"Yocto-Project/07_Variable_Assignment/#assignment-type-append-prepend-and-remove","title":"Assignment Type :append, :prepend and :remove","text":"<pre><code># No Spaces are added here\n# Needs to add extra space\n# Parsed at the end\n\n# Append\nA = \"foo\"\nA:append = \"bar\"\n# The final value is A=\"foobar\" \n\n# Append\nA = \"foo\"\nA:append = \"bar\"\nA += \"val\"\n# The final value is A=\"foo valbar\" \n\n# Append\nA = \"foo\"\nA:append = \" bar\"\n# The final value is A=\"foo bar\" \n\n\n# Prepend\nA = \"foo\"\nA:prepend = \"bar\"\n# The final value is A=\"barfoo\" \n\n# Prepend\nA = \"foo\"\nA:prepend = \"bar\"\nA =+ \"val\"\n# The final value is A=\"barval foo\" \n\n# Prepend\nA = \"foo\"\nA:prepend = \"bar \"\n# The final value is A=\"bar foo\" \n\n#remove\n\nA = \"foo bar\"\nA:remove = \"foo\"\n# The final value is A=\" bar\" \n\nA = \"foo bar\"\nA:remove = \"var\"\nA += \"var\"\n# The final value is A=\" foo bar val\" \n</code></pre>"},{"location":"Yocto-Project/07_Variable_Assignment/#reference-link","title":"Reference Link","text":"<p>https://docs.yoctoproject.org/bitbake/2.2/bitbake-user-manual/bitbake-user-manual-metadata.html</p>"},{"location":"Yocto-Project/07_Variable_Assignment/#end","title":"End","text":"<p>In the next video we will learn about how to create a simple recipe.</p>"},{"location":"Yocto-Project/08_Hello_World_Recipe/","title":"Yocto","text":""},{"location":"Yocto-Project/08_Hello_World_Recipe/#08-hello-world-recipe","title":"08 Hello World Recipe","text":""},{"location":"Yocto-Project/08_Hello_World_Recipe/#what-are-you-going-to-learn","title":"What are you going to learn?","text":"<p>In this video we are going to create a yocto recipe from scratch.</p>"},{"location":"Yocto-Project/08_Hello_World_Recipe/#what-topics-we-are-going-to-cover","title":"What Topics we are going to cover?","text":"<ul> <li>A helloworld.c program</li> <li>SUMMARY : A brief description of the Recipe</li> <li>LICENSE : Which Type of License are we going to use E.g MIT, GPL, BSD etc.</li> <li>LIC_FILES_CHKSUM : License file location and its md5 checksum.</li> <li>Calculate checksum using md5sum utility</li> <li>SRC_URI : Source Files</li> <li>do_compile: Here the compilation takes place.</li> <li>do_install : Here we tells the recipe where to put the binary file in final image.</li> <li></li> </ul>"},{"location":"Yocto-Project/08_Hello_World_Recipe/#how-to-generate-md5-checksum","title":"How to Generate md5 Checksum","text":"<pre><code>md5sum FILENAME\n</code></pre>"},{"location":"Yocto-Project/08_Hello_World_Recipe/#reference-link","title":"Reference Link","text":"<p>https://docs.yoctoproject.org/bitbake/2.2/bitbake-user-manual/bitbake-user-manual-metadata.html</p>"},{"location":"Yocto-Project/08_Hello_World_Recipe/#end","title":"End","text":"<p>In the next video we will learn about bitbake steps.</p>"},{"location":"Yocto-Project/09_Build_Tasks/","title":"Yocto","text":""},{"location":"Yocto-Project/09_Build_Tasks/#08-build-tasks","title":"08 Build Tasks","text":""},{"location":"Yocto-Project/09_Build_Tasks/#what-are-you-going-to-learn","title":"What are you going to learn?","text":"<p>In this video we are going to learn about the common build tasks in Yocto.</p>"},{"location":"Yocto-Project/09_Build_Tasks/#what-topics-we-are-going-to-cover","title":"What Topics we are going to cover?","text":"<ul> <li>What are build tasks?</li> <li>How to list the build tasks of a recipe?</li> <li>What are common build tasks in Yocto?</li> <li>Brief description of common build tasks.</li> </ul>"},{"location":"Yocto-Project/09_Build_Tasks/#what-are-build-tasks","title":"What are build tasks?","text":"<p>Tasks can be considered as units of execution to perform a specific function, or a set of related functions that can be combined together.</p>"},{"location":"Yocto-Project/09_Build_Tasks/#how-to-list-the-build-tasks-of-a-recipe","title":"How to list the build tasks of a recipe?","text":"<pre><code>bitbake -c listtasks &lt;recipe-name&gt;\n</code></pre>"},{"location":"Yocto-Project/09_Build_Tasks/#what-are-common-build-tasks-in-yocto","title":"What are common build tasks in Yocto?","text":"<ul> <li>Fetch (do_fetch) :   Fetches the source code</li> <li>Unpack (do_upack) : Unpacks the source code into a working directory</li> <li>Patch (do_patch) : Locates patch files and applies them to the source code</li> <li>Configure (do_configure) : Configures the source by enabling and disabling any build-time and configuration options for the software being built.</li> <li>Compile (do_compile) : Compiles the source in the compilation directory</li> <li>Install (do_install) : Copies files from the compilation directory to a holding area</li> </ul>"},{"location":"Yocto-Project/09_Build_Tasks/#fetch-task","title":"Fetch Task","text":""},{"location":"Yocto-Project/09_Build_Tasks/#what-are-we-going-to-learn","title":"What are we going to learn?","text":"<ul> <li>What is Fetch task?</li> <li>Where to define fetch Repo?</li> <li>How to define fetch repo?</li> <li>What is SRCREV Variable?</li> <li>How to fetch source from remote repo?</li> <li>Where sources are downloaded?</li> </ul>"},{"location":"Yocto-Project/09_Build_Tasks/#what-is-fetch-task","title":"What is Fetch task?","text":"<p>Fetch task fetches the package source from the local or remote repository.</p>"},{"location":"Yocto-Project/09_Build_Tasks/#where-to-give-fetch-repo","title":"Where to give fetch Repo?","text":"<p>The fetch Repo address has to be stored in  SRC_URI variable.</p>"},{"location":"Yocto-Project/09_Build_Tasks/#what-is-srcrev-variable","title":"What is SRCREV Variable?","text":"<p>In SRCREV Variable the commit hash of github repo is defined.</p>"},{"location":"Yocto-Project/09_Build_Tasks/#how-to-fetch-source","title":"How to fetch Source?","text":"<p>The source repo is stored in SRC_URI variable. Normaly the build process fetches the source automatically.</p> <p>There is no explicit need to execute the fetch task.</p> <p>But in this tutorial, we will be fetching it explicitly so we can analyse how it works.</p> <pre><code>bitbake -c do_fetch recipie-name\n</code></pre>"},{"location":"Yocto-Project/09_Build_Tasks/#unpack-task","title":"Unpack Task","text":""},{"location":"Yocto-Project/09_Build_Tasks/#what-are-we-going-to-learn_1","title":"What are we going to learn?","text":"<ul> <li>What is unpack task?</li> <li>How to unpack source?</li> <li>Where does it unpack?</li> </ul>"},{"location":"Yocto-Project/09_Build_Tasks/#what-is-unpack-task","title":"What is Unpack task?","text":"<p>Unpack task unpacks the package that has been downloaded with Fetch task.</p>"},{"location":"Yocto-Project/09_Build_Tasks/#how-to-unpack-source","title":"How to unpack Source?","text":"<p>Normaly the build process unpacks the source automatically.</p> <p>There is no explicit need to execute the unpack task.</p> <p>But in this tutorial, we will be unpacking  explicitly so we can analyse how it works.</p> <pre><code>bitbake -c do_unpack recipie-name\n</code></pre>"},{"location":"Yocto-Project/09_Build_Tasks/#where-does-it-unpack","title":"Where does it unpack?","text":"<p>The unpack task unpacks the sources in to WORKDIR folder.</p>"},{"location":"Yocto-Project/09_Build_Tasks/#patch-task","title":"Patch Task","text":""},{"location":"Yocto-Project/09_Build_Tasks/#what-are-we-going-to-learn_2","title":"What are we going to learn?","text":"<ul> <li>What is Patch task?</li> <li>What is Patch file?</li> <li>Where to give patch file?</li> <li>Where does it run?</li> <li>How to patch?</li> </ul>"},{"location":"Yocto-Project/09_Build_Tasks/#what-is-patch-task","title":"What is Patch task?","text":"<p>Patch task locates the patch files and applies the patches to the sources if any patch is available.</p> <p>This is optional task, executes if patch is available.</p>"},{"location":"Yocto-Project/09_Build_Tasks/#what-is-patch-file","title":"What is Patch file?","text":"<p>A patch files provides some explicit changes for a specific file. That can be applied to that file.</p>"},{"location":"Yocto-Project/09_Build_Tasks/#where-to-give-patch-file","title":"Where to give Patch file?","text":"<p>Patch file is also defined in SRC_URI variable.</p>"},{"location":"Yocto-Project/09_Build_Tasks/#where-does-it-run","title":"Where does it run?","text":"<p>By default it runs in current source directory ${S}.</p>"},{"location":"Yocto-Project/09_Build_Tasks/#how-to-patch","title":"How to patch?","text":"<p>The patchees are stored in SRC_URI variable. Normaly the build process apply patches automatically to the desired file.</p> <p>There is no explicit need to execute the patch task.</p> <p>But in this tutorial, we will be patching  explicitly so we can analyse how it works.</p> <pre><code>bitbake -c do_patch recipie-name\n</code></pre>"},{"location":"Yocto-Project/09_Build_Tasks/#configure-task","title":"Configure Task","text":""},{"location":"Yocto-Project/09_Build_Tasks/#what-are-we-going-to-learn_3","title":"What are we going to learn?","text":"<ul> <li>What is Configure task?</li> <li>How to define configuration?</li> <li>Where does it runs?</li> <li>How to apply configuration?</li> </ul>"},{"location":"Yocto-Project/09_Build_Tasks/#what-is-configure-task","title":"What is Configure task?","text":"<p>The Configuration task configures the source by enabling and disabling any build-time and configuration options for the software being built before compilation if any configuration is available.</p> <p>This is a optional steps, executes if configuration is available.</p>"},{"location":"Yocto-Project/09_Build_Tasks/#how-to-define-configuration","title":"How to define Configuration?","text":"<p>If there are any configuration steps, then these steps are define in do_configure() funtion of bitbake.</p> <pre><code>do_configure()\n{\nconfigutaion \nsteps are \nwritten \nhere\n}\n</code></pre>"},{"location":"Yocto-Project/09_Build_Tasks/#where-does-it-runs","title":"Where does it runs?","text":"<p>It runs in current source directory ${S}.</p>"},{"location":"Yocto-Project/09_Build_Tasks/#how-to-apply-configuration","title":"How to apply Configuration?","text":"<p>Normaly the build applies the defined configuration automatically.</p> <p>There is no explicit need to execute the configuration task.</p> <p>But in this tutorial, we will be doing configuration  explicitly so we can analyse how it works.</p> <pre><code>bitbake -c do_configure recipie-name\n</code></pre>"},{"location":"Yocto-Project/09_Build_Tasks/#compile-task","title":"Compile Task","text":""},{"location":"Yocto-Project/09_Build_Tasks/#what-are-we-going-to-learn_4","title":"What are we going to learn?","text":"<ul> <li>What is Compile task?</li> <li>How to define Compilation steps?</li> <li>Where does it runs?</li> <li>How to execute compilation?</li> </ul>"},{"location":"Yocto-Project/09_Build_Tasks/#what-is-compilation-task","title":"What is Compilation task?","text":"<p>The Compilation task compiles the source code if any compilation steps are available and generates a binary file.</p> <p>This is a optional steps, executes if comilation is available.</p>"},{"location":"Yocto-Project/09_Build_Tasks/#how-to-define-compilation-steps","title":"How to define Compilation steps?","text":"<p>If there are any compilation steps, then these steps are define in do_compile() funtion of bitbake.</p> <pre><code>do_compile()\n{\ncompilation \nsteps are \nwritten \nhere\n}\n</code></pre>"},{"location":"Yocto-Project/09_Build_Tasks/#where-does-it-runs_1","title":"Where does it runs?","text":"<p>It runs in current source directory ${S}.</p>"},{"location":"Yocto-Project/09_Build_Tasks/#how-to-execute-compilation","title":"How to execute Compilation ?","text":"<p>Normaly the build executes the compile step automatically.</p> <p>There is no explicit need to execute the compilation task.</p> <p>But in this tutorial, we will be compiling the sources explicitly so we can analyse how it works.</p> <pre><code>bitbake -c do_compile recipie-name\n</code></pre>"},{"location":"Yocto-Project/09_Build_Tasks/#install-task","title":"Install Task","text":""},{"location":"Yocto-Project/09_Build_Tasks/#what-are-we-going-to-learn_5","title":"What are we going to learn?","text":"<ul> <li>What is Install task?</li> <li>How to define Installtion steps?</li> <li>Where does it runs?</li> <li>How to do Installation?</li> </ul>"},{"location":"Yocto-Project/09_Build_Tasks/#what-is-install-task","title":"What is Install task?","text":"<p>The Install task copies files that are to be packaged into the holding area ${D}. This task runs with the current working directory ${S} which is the compilation directory.</p>"},{"location":"Yocto-Project/09_Build_Tasks/#how-to-define-installation-steps","title":"How to define Installation steps?","text":"<p>If there are any installation steps, then these steps are define in do_install() funtion of bitbake.</p> <pre><code>do_install()\n{\ncompilation \nsteps are \nwritten \nhere\n}\n</code></pre>"},{"location":"Yocto-Project/09_Build_Tasks/#where-does-it-runs_2","title":"Where does it runs?","text":"<p>It runs in current source directory ${S}.</p>"},{"location":"Yocto-Project/09_Build_Tasks/#how-to-do-installation","title":"How to do Installation ?","text":"<p>Normaly the build executes the Install task automatically.</p> <p>There is no explicit need to execute the Install task.</p> <p>But in this tutorial, we will be doing install explicitly so we can analyse how it works.</p> <pre><code>bitbake -c do_install recipie-name\n</code></pre>"},{"location":"Yocto-Project/09_Build_Tasks/#reference-link","title":"Reference Link","text":"<p>https://docs.yoctoproject.org/ref-manual/tasks.html</p> <p>https://docs.yoctoproject.org/bitbake/2.2/bitbake-user-manual/bitbake-user-manual-metadata.html</p>"},{"location":"Yocto-Project/10_Patch/","title":"Yocto","text":""},{"location":"Yocto-Project/10_Patch/#10-patch","title":"10 Patch","text":""},{"location":"Yocto-Project/10_Patch/#what-are-you-going-to-learn","title":"What are you going to learn?","text":"<p>In this video we are going to learn how to creat a patch in yocto</p>"},{"location":"Yocto-Project/10_Patch/#what-topics-we-are-going-to-cover","title":"What Topics we are going to cover?","text":"<ul> <li>What is a patching?</li> <li>How to write a Patch?</li> <li>How to save a Patch?</li> <li>How to apply a Patch?.</li> </ul>"},{"location":"Yocto-Project/10_Patch/#steps-to-create-and-apply-a-patch","title":"Steps to create and Apply a Patch","text":"<ul> <li> <p>bitbake -c devshell *recipe*</p> </li> <li> <p>git init</p> </li> <li> <p>git add *</p> </li> <li> <p>git commit (sourcetree recorded by git)</p> </li> <li> <p>Edit the file in any editor you like and then save it eg.(vi */path/to/file*)</p> </li> <li> <p>git status (shows that the file is modified)</p> </li> <li> <p>git add */path/to/file*</p> </li> <li> <p>git commit -m *\"a sutaible comment according to the changes you made\"*</p> </li> <li> <p>git log (shows that changes have be made and commit history)</p> </li> <li> <p>git format-patch HEAD~1 (output sthe patch file created by the last commit)</p> </li> <li> <p>ls (checks if patch file is there)</p> </li> <li> <p>Copy the patch file into recipe/files folder</p> </li> <li> <p>execute exit to exit devshell</p> </li> <li> <p>Edit recipe.bb OR create recipe.bbappend file and add patch file in SRC_URI variable</p> </li> </ul> <p><code>bitbake    FILESEXTRAPATHS:prepend := \"${THISDIR}/${PN}:\"      SRC_URI += \" file://patchfile.patch \"</code></p> <ul> <li>Build the image again with bitbake *image_name*</li> </ul>"},{"location":"Yocto-Project/10_Patch/#reference-link","title":"Reference Link","text":"<p>https://docs.yoctoproject.org/ref-manual/tasks.html</p> <p>https://docs.yoctoproject.org/bitbake/2.2/bitbake-user-manual/bitbake-user-manual-metadata.html</p>"},{"location":"Yocto-Project/11_RDEPENDS/","title":"Yocto","text":""},{"location":"Yocto-Project/11_RDEPENDS/#11-rdepends","title":"11 RDEPENDS","text":""},{"location":"Yocto-Project/11_RDEPENDS/#what-are-you-going-to-learn","title":"What are you going to learn?","text":"<p>In this video we are going to learn how to use RDEPENDS</p>"},{"location":"Yocto-Project/11_RDEPENDS/#what-topics-we-are-going-to-cover","title":"What Topics we are going to cover?","text":"<ul> <li>What is RDEPENDS?</li> <li>Why to use RDEPENDS?</li> <li>How to use RDEPENDS?</li> <li>Where to use RDEPENDS?</li> </ul>"},{"location":"Yocto-Project/11_RDEPENDS/#description","title":"Description","text":"<p>In Yocto Project, <code>RDEPENDS</code> is a variable used to specify runtime dependencies for a particular package or recipe. It is used to define the other packages or components that must be present on the target system for the package to function correctly during runtime.</p> <p>The <code>RDEPENDS</code> variable is typically defined within the recipe file (.bb or .bbappend) of the package. It contains a space-separated list of package names that the current package depends on for proper runtime execution.</p> <p>Here's an example to illustrate the usage of <code>RDEPENDS</code>:</p> <p>Let's say you have a recipe for a package called \"myapp\" which is an application that requires the \"openssl\" library to run. In the recipe file for \"myapp\" (e.g., <code>myapp.bb</code>), you can specify the runtime dependency using the <code>RDEPENDS</code> variable like this:</p> <pre><code>RDEPENDS_${PN} = \"openssl\"\n</code></pre> <p>In the example above, <code>${PN}</code> refers to the package name itself, which in this case is \"myapp\". So, we are saying that \"myapp\" has a runtime dependency on \"openssl\".</p> <p>You can specify multiple dependencies by separating them with spaces:</p> <pre><code>RDEPENDS_${PN} = \"libfoo libbar openssl\"\n</code></pre> <p>In this case, \"myapp\" has runtime dependencies on \"libfoo\", \"libbar\", and \"openssl\".</p> <p>The <code>RDEPENDS</code> variable helps the package manager in the Yocto Project to automatically include the specified runtime dependencies when generating the root filesystem or image for the target system. This ensures that all the required components are present on the target device for the package to function correctly during runtime.</p>"},{"location":"Yocto-Project/11_RDEPENDS/#reference-link","title":"Reference Link","text":"<p>https://docs.yoctoproject.org/ref-manual/tasks.html</p> <p>https://docs.yoctoproject.org/bitbake/2.2/bitbake-user-manual/bitbake-user-manual-metadata.html</p>"},{"location":"Yocto-Project/12_RPROVIDES/","title":"Yocto","text":""},{"location":"Yocto-Project/12_RPROVIDES/#12-rprovides","title":"12 RPROVIDES","text":""},{"location":"Yocto-Project/12_RPROVIDES/#what-are-you-going-to-learn","title":"What are you going to learn?","text":"<p>In this video we are going to learn how to use RPROVIDES</p>"},{"location":"Yocto-Project/12_RPROVIDES/#what-topics-we-are-going-to-cover","title":"What Topics we are going to cover?","text":"<ul> <li>What is RPROVIDES?</li> <li>Why to use RPROVIDES?</li> <li>How to use RPROVIDES?</li> <li>Where to use RPROVIDES?</li> </ul>"},{"location":"Yocto-Project/12_RPROVIDES/#description","title":"Description","text":"<p>A list of package name aliases that a package also provides. These aliases are useful for satisfying runtime dependencies of other packages both during the build and on the target (as specified by RDEPENDS).</p> <p>As with all package-controlling variables, you must always use the variable in conjunction with a package name override. Here is an example:</p> <pre><code>RPROVIDES:${PN} = \"foobar\"\n</code></pre>"},{"location":"Yocto-Project/12_RPROVIDES/#reference-link","title":"Reference Link","text":"<p>https://docs.yoctoproject.org/ref-manual/tasks.html</p> <p>https://docs.yoctoproject.org/bitbake/2.2/bitbake-user-manual/bitbake-user-manual-metadata.html</p>"}]}